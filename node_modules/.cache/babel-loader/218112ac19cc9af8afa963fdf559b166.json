{"ast":null,"code":"var _jsxFileName = \"/Users/irinakavun/WebstormProjects/Practicing/react_form_validation/src/pages/FormikForm.js\";\nimport React, { Fragment } from 'react';\nimport { useFormik } from 'formik';\nimport { validationSchema } from '../validation/validationSchema';\nimport { Button, TextField, FormControlLabel, Checkbox } from \"@material-ui/core\";\nexport const FormikForm = () => {\n  const {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  } = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: ''\n    },\n    validationSchema,\n\n    onSubmit(values) {\n      console.log(values);\n    }\n\n  }); // const [state, setState] = useState({\n  //   offers: false,\n  //   news: false\n  // });\n  //\n  // const handleChange = name => event => {\n  //   setState({ ...state, [name]: event.target.checked });\n  // };\n  //\n  // const { offers, news } = state;\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"page-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Form Validation with Formik\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    required: true,\n    onChange: handleChange,\n    values: values.name\n  }, errors.name && {\n    helperText: errors.name,\n    error: true\n  }, {\n    name: \"name\",\n    label: \"Name\",\n    autoComplete: \"off\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })), React.createElement(TextField, Object.assign({\n    required: true,\n    onChange: handleChange,\n    values: values.email\n  }, errors.email && {\n    helperText: errors.email,\n    error: true\n  }, {\n    name: \"email\",\n    label: \"Email\",\n    autoComplete: \"off\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(TextField, Object.assign({\n    required: true,\n    onChange: handleChange,\n    values: values.email\n  }, errors.password && {\n    helperText: errors.password,\n    error: true\n  }, {\n    name: \"password\",\n    label: \"Password\",\n    autoComplete: \"off\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: values.checked,\n      onChange: handleChange(\"consent\"),\n      value: \"checkedA\",\n      name: \"consent\",\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }),\n    label: \"Secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"SUBMIT\")));\n};","map":{"version":3,"sources":["/Users/irinakavun/WebstormProjects/Practicing/react_form_validation/src/pages/FormikForm.js"],"names":["React","Fragment","useFormik","validationSchema","Button","TextField","FormControlLabel","Checkbox","FormikForm","handleChange","handleSubmit","values","errors","initialValues","name","email","password","onSubmit","console","log","helperText","error","checked"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\nimport {useFormik} from 'formik';\nimport {validationSchema} from '../validation/validationSchema';\n\nimport {Button, TextField, FormControlLabel, Checkbox} from \"@material-ui/core\";\n\nexport const FormikForm = () => {\n  const {handleChange, handleSubmit, values, errors} = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: ''\n    },\n    validationSchema,\n    onSubmit(values) {\n      console.log(values)\n    }\n  });\n\n  // const [state, setState] = useState({\n  //   offers: false,\n  //   news: false\n  // });\n  //\n  // const handleChange = name => event => {\n  //   setState({ ...state, [name]: event.target.checked });\n  // };\n  //\n  // const { offers, news } = state;\n\n\n  return (\n    <Fragment>\n      <h1 className=\"page-title\">Form Validation with Formik</h1>\n      <form onSubmit={handleSubmit} noValidate className=\"form\">\n        <TextField\n          required\n          onChange={handleChange}\n          values={values.name}\n          {...errors.name && {helperText: errors.name, error: true}}\n          name=\"name\"\n          label=\"Name\"\n          autoComplete=\"off\"\n          variant=\"outlined\"\n        />\n          <TextField\n            required\n            onChange={handleChange}\n            values={values.email}\n            {...errors.email && {helperText: errors.email, error: true}}\n            name=\"email\"\n            label=\"Email\"\n            autoComplete=\"off\"\n            variant=\"outlined\"\n          />\n        <TextField\n          required\n          onChange={handleChange}\n          values={values.email}\n          {...errors.password && {helperText: errors.password, error: true}}\n          name=\"password\"\n          label=\"Password\"\n          autoComplete=\"off\"\n          variant=\"outlined\"\n        />\n        <FormControlLabel\n          control={<Checkbox\n            checked={values.checked}\n            onChange={handleChange(\"consent\")}\n            value=\"checkedA\"\n            name=\"consent\"\n            type=\"checkbox\"\n          />} label=\"Secondary\"\n        />\n\n          <Button type=\"submit\" variant=\"contained\">SUBMIT</Button>\n    </form>\n    </Fragment>\n  )\n};"]},"metadata":{},"sourceType":"module"}