{"ast":null,"code":"var _jsxFileName = \"/Users/irinakavun/WebstormProjects/Practicing/react_form_validation/src/pages/Form.js\";\nimport React, { Fragment } from 'react';\nimport { useForm } from '../useForm';\nimport { TextField, Checkbox, Button } from '@material-ui/core/index';\nimport { RadioButtonsGroup } from '../components/RadioGroup';\nimport { validate } from '../validation/validate';\nexport const Form = () => {\n  const {\n    values,\n    gender,\n    checked,\n    errors,\n    handleChange,\n    handleCheck,\n    handleSubmit,\n    handleRadioSelect\n  } = useForm(submitted, validate);\n\n  function submitted() {\n    console.log(values, gender, checked);\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"page-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Basic React Validation\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    required: true,\n    name: \"name\",\n    label: \"Name\",\n    autoComplete: \"off\"\n  }, errors.name && {\n    helperText: errors.name,\n    error: true\n  }, {\n    variant: \"outlined\",\n    value: values.name,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), React.createElement(RadioButtonsGroup, {\n    gender: gender,\n    handleRadioSelect: handleRadioSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(TextField, Object.assign({\n    required: true,\n    name: \"email\",\n    label: \"Email\",\n    autoComplete: \"off\"\n  }, errors.email && {\n    helperText: errors.email,\n    error: true\n  }, {\n    variant: \"outlined\",\n    value: values.email,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(TextField, Object.assign({\n    required: true,\n    name: \"password\",\n    label: \"Password\",\n    autoComplete: \"off\"\n  }, errors.password && {\n    helperText: errors.password,\n    error: true\n  }, {\n    type: \"password\",\n    variant: \"outlined\",\n    value: values.password,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkbox-wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: values.isEnabled,\n    onChange: handleCheck,\n    value: \"secondary\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"A checkbox is a GUI widget that permits the user to make a binary choice\")), errors.checked && React.createElement(\"div\", {\n    className: \"form-field-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, errors.checked)), React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"SUBMIT\")));\n};","map":{"version":3,"sources":["/Users/irinakavun/WebstormProjects/Practicing/react_form_validation/src/pages/Form.js"],"names":["React","Fragment","useForm","TextField","Checkbox","Button","RadioButtonsGroup","validate","Form","values","gender","checked","errors","handleChange","handleCheck","handleSubmit","handleRadioSelect","submitted","console","log","name","helperText","error","email","password","isEnabled"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\nimport {useForm} from '../useForm';\nimport {TextField, Checkbox, Button} from '@material-ui/core/index';\nimport {RadioButtonsGroup} from '../components/RadioGroup';\nimport {validate} from '../validation/validate';\n\nexport const Form = () => {\n  const {\n    values,\n    gender,\n    checked,\n    errors,\n    handleChange,\n    handleCheck,\n    handleSubmit,\n    handleRadioSelect\n  } = useForm(submitted, validate);\n\n  function submitted() {\n    console.log(values, gender, checked);\n  }\n\n  return (\n    <Fragment>\n      <h1 className=\"page-title\">Basic React Validation</h1>\n      <form onSubmit={handleSubmit} noValidate className=\"form\">\n        <TextField\n          required\n          name=\"name\"\n          label=\"Name\"\n          autoComplete=\"off\"\n          {...errors.name && {helperText: errors.name, error: true}}\n          variant=\"outlined\"\n          value={values.name}\n          onChange={handleChange}\n        />\n        <RadioButtonsGroup\n          gender={gender}\n          handleRadioSelect={handleRadioSelect}\n        />\n        <TextField\n          required\n          name=\"email\"\n          label=\"Email\"\n          autoComplete=\"off\"\n          {...errors.email && {helperText: errors.email, error: true}}\n          variant=\"outlined\"\n          value={values.email}\n          onChange={handleChange}\n        />\n        <TextField\n          required\n          name=\"password\"\n          label=\"Password\"\n          autoComplete=\"off\"\n          {...errors.password && {helperText: errors.password, error: true}}\n          type=\"password\"\n          variant=\"outlined\"\n          value={values.password}\n          onChange={handleChange}\n        />\n        <div className=\"form-checkbox\">\n          <div className=\"checkbox-wrap\">\n            <Checkbox\n              checked={values.isEnabled}\n              onChange={handleCheck}\n              value=\"secondary\"\n              color=\"primary\"\n            />\n            <p>A checkbox is a GUI widget that permits the user to make a binary choice</p>\n          </div>\n          {errors.checked && <div className=\"form-field-error\">{errors.checked}</div>}\n        </div>\n        <Button type=\"submit\" variant=\"contained\">SUBMIT</Button>\n      </form>\n    </Fragment>\n  );\n};"]},"metadata":{},"sourceType":"module"}